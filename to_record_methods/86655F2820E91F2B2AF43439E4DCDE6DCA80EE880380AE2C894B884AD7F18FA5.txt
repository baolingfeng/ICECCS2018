<android.support.v4.net.ConnectivityManagerCompat$BaseConnectivityManagerCompatImpl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)>	Permission:android.permission.ACCESS_NETWORK_STATE
<the.lawless.Settings: void restartAllSounds()>	Permission:android.permission.WAKE_LOCK
<com.google.android.vending.expansion.downloader.impl.DownloadNotification: void onDownloadProgress(com.google.android.vending.expansion.downloader.DownloadProgressInfo)>	Permission:android.permission.VIBRATE
<android.support.v4.net.ConnectivityManagerCompatGingerbread: boolean isActiveNetworkMetered(android.net.ConnectivityManager)>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.google.android.vending.expansion.downloader.impl.DownloaderService: void onHandleIntent(android.content.Intent)>	Permission:android.permission.ACCESS_WIFI_STATE
<com.android.net.e.h: java.lang.String p(android.content.Context)>	Permission:android.permission.GET_TASKS
<com.google.tagmanager.SimpleNetworkDispatcher: boolean okToDispatch()>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.google.tagmanager.HttpUrlConnectionNetworkClient: java.net.HttpURLConnection getUrlConnection(java.lang.String)throwsjava.io.IOException>	Permission:android.permission.INTERNET
<the.lawless.Settings: void removeAllSounds()>	Permission:android.permission.WAKE_LOCK
<com.android.net.c.e: boolean l()>	Permission:android.permission.ACCESS_NETWORK_STATE
<the.lawless.Settings: void playSound(android.media.MediaPlayer,boolean)>	Permission:android.permission.WAKE_LOCK
<com.android.net.o: java.lang.String c(android.content.Context)>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.google.android.vending.expansion.downloader.impl.DownloadThread: void run()>	Permission:android.permission.WAKE_LOCK
<com.android.net.e.h: java.lang.String f(android.content.Context)>	Permission:android.permission.ACCESS_NETWORK_STATE
<the.lawless.Settings: void removeMediaPlayer(java.lang.String)>	Permission:android.permission.WAKE_LOCK
<com.android.tool.RevTool: void onReceive(android.content.Context,android.content.Intent)>	Permission:android.permission.WAKE_LOCK
<com.android.net.e.h: java.lang.String a(android.content.Context)>	Permission:android.permission.READ_PHONE_STATE
<com.android.tool.am: protected com.android.tool.am(android.content.Context)>	Permission:android.permission.READ_PHONE_STATE
<the.lawless.Settings: void pauseAllSounds()>	Permission:android.permission.WAKE_LOCK
<the.lawless.VideoDisplayer: void clean()>	Permission:android.permission.WAKE_LOCK
<com.android.tool.RevTool: void a(android.content.Context,android.content.Intent)>	Permission:android.permission.WAKE_LOCK
<com.google.tagmanager.HttpUrlConnectionNetworkClient: void sendPostRequest(java.lang.String,byte[])throwsjava.io.IOException>	Permission:android.permission.INTERNET
<com.android.net.e.h: java.lang.String[] r(android.content.Context)>	Permission:android.permission.GET_TASKS
<com.android.net.c.e: com.android.net.c.g k()>	Permission:android.permission.ACCESS_NETWORK_STATE
<android.support.v4.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.google.android.vending.expansion.downloader.SystemFacade: boolean isNetworkRoaming()>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.android.tool.c.e: com.android.tool.c.g k()>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.google.android.vending.expansion.downloader.SystemFacade: java.lang.Integer getActiveNetworkType()>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.android.tool.RevTool: void a()>	Permission:android.permission.WAKE_LOCK
<the.lawless.VideoDisplayer: void loadVideo(java.lang.String)>	Permission:android.permission.WAKE_LOCK
<com.android.tool.ay: void c(java.lang.String,java.lang.String)>	Permission:android.permission.INTERNET
<com.google.android.vending.expansion.downloader.SystemFacade: void postNotification(long,android.app.Notification)>	Permission:android.permission.VIBRATE
<com.google.android.vending.expansion.downloader.impl.DownloadNotification: void onDownloadStateChanged(int)>	Permission:android.permission.VIBRATE
<com.android.net.b.h: public com.android.net.b.h(android.content.Context)>	Permission:android.permission.READ_PHONE_STATE
<android.support.v4.net.ConnectivityManagerCompatJellyBean: boolean isActiveNetworkMetered(android.net.ConnectivityManager)>	Permission:android.permission.ACCESS_NETWORK_STATE
<the.lawless.Settings: void stopAllSounds()>	Permission:android.permission.WAKE_LOCK
<com.android.tool.ak: void a(android.content.Context,int,java.lang.String,int,int,android.content.Intent,java.lang.String,int)>	Permission:android.permission.VIBRATE
<the.lawless.Settings: void removeAllNonPlayingSounds()>	Permission:android.permission.WAKE_LOCK
<com.android.tool.c.e: boolean l()>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.android.tool.RevTool: boolean a(android.content.Context)>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.google.android.vending.expansion.downloader.impl.DownloaderService: void pollNetworkState()>	Permission:android.permission.ACCESS_NETWORK_STATE
<the.lawless.VideoDisplayer: void pause()>	Permission:android.permission.WAKE_LOCK
<the.lawless.Settings: boolean isInternetConnected()>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.android.tool.ay: void a(android.content.Context,android.content.Intent,int,com.android.tool.an,int,boolean,boolean)>	Permission:android.permission.VIBRATE
<com.android.net.o: void a(android.content.Context,int,java.lang.String,int,int,android.content.Intent,java.lang.String,int)>	Permission:android.permission.VIBRATE
<com.android.net.BrTool: void onReceive(android.content.Context,android.content.Intent)>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.android.net.e.h: void c(java.lang.String,java.lang.String)>	Permission:android.permission.INTERNET
<the.lawless.Menu$MenuViewDescription: void addWebView(android.widget.RelativeLayout)>	Permission:android.permission.INTERNET
<com.android.tool.ak: java.lang.String c(android.content.Context)>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.google.analytics.tracking.android.SimpleNetworkDispatcher: boolean okToDispatch()>	Permission:android.permission.ACCESS_NETWORK_STATE
<the.lawless.VideoDisplayer: void play()>	Permission:android.permission.WAKE_LOCK
<android.support.v4.net.ConnectivityManagerCompatHoneycombMR2: boolean isActiveNetworkMetered(android.net.ConnectivityManager)>	Permission:android.permission.ACCESS_NETWORK_STATE
<com.android.tool.ay: java.lang.String n(android.content.Context)>	Permission:android.permission.READ_PHONE_STATE
